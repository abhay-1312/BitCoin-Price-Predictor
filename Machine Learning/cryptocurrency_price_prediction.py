# -*- coding: utf-8 -*-
"""Cryptocurrency Price Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LEPkRCnLrVFrp2lnKx_Av6ORwxBYaWGB
"""

# This program is using a deep learning approach to predict Cryptocurrency prices(Ethereum , BitCoin, etc.)

#Keras for Deep Learning
from keras.layers.core import Dense,Activation,Dropout 
from keras.layers.recurrent import LSTM
from keras.layers import Bidirectional
from keras.models import Sequential

#Scikit Learn for Mapping Data
from sklearn.metrics import mean_absolute_error

import time

import numpy as np
import math

#For plotting data
import matplotlib.pyplot as plt

#For Processing Data
import pandas as pd

from google.colab import files
uploaded = files.upload()

#Reading xlsx file
df = pd.read_excel('BitCoin.xlsx')

# Remove the columns,we just need the data of the closing prices of everyday data.
# Data Processing
df.drop(df.loc[ : , df.columns != 'Close'],1,inplace=True)

#df.head(7)

df.rename(columns={"Close":"Closing Price"},inplace=True)

# A variable for predicting 'n' days out into the future
prediction_days = 30;

#Another column for shifted 'n' units up
df['Prediction'] =  df['Closing Price'].shift(-prediction_days)

#Convert the dataframe to a numpy array  and drop Prediction column. 
#Create the independent data set.
X = np.array(df.drop(['Prediction'],1))

#Remove the last 'n' rows 
X = X [:len(df)- prediction_days]

#Create the dependent data set. 
 #Convert the dataframe to numpy array
 y = np.array(df['Prediction'])

 #Remove the last 'n' rows.
y = y[:- prediction_days]

#As value of BitCoins are higly volatile we are going to be Spliting data into 65% training and 35% test.

from sklearn.model_selection import train_test_split

X_train,X_test,Y_train,Y_test = train_test_split(X,y,test_size=0.65)

#Set the prediction_days_array i.e. the last 'n' rows of original data set which were set up to NULL whose value we are going to predict

prediction_days_array = np.array(df.drop(['Prediction'],1))[-prediction_days:]

from sklearn.svm import SVR

# Create and train a SVM (Regression) 
svr_rbf = SVR(kernel='rbf',C= 1e3 , gamma= 0.00001)
svr_rbf.fit(X_train,Y_train)

svm_accuracy  = svr_rbf.score(X_train,Y_train)
print("svm_accuracy: " , svm_accuracy)
#WHOO!! Accuracy of more than 70% with just using ML is great.

# Setting the last n days as the predicted value.
svm_prediction = svr_rbf.predict(prediction_days_array)
df['Prediction'][-30:] = svm_prediction

print()
#Print the actual price of 30 days.
print(df.tail(prediction_days))